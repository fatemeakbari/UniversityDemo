/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.myportlet.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.myportlet.model.Teacher;
import com.liferay.myportlet.model.TeacherModel;
import com.liferay.myportlet.model.TeacherSoap;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Teacher service. Represents a row in the &quot;MYUD_Teacher&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TeacherModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TeacherImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see TeacherImpl
 * @generated
 */
@JSON(strict = true)
public class TeacherModelImpl
	extends BaseModelImpl<Teacher> implements TeacherModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a teacher model instance should use the <code>Teacher</code> interface instead.
	 */
	public static final String TABLE_NAME = "MYUD_Teacher";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"teacherId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP},
		{"name", Types.VARCHAR}, {"biography", Types.VARCHAR},
		{"college", Types.VARCHAR}, {"rank_", Types.VARCHAR},
		{"position", Types.VARCHAR}, {"roomNumber", Types.VARCHAR},
		{"phoneNumber", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"twitterAddress", Types.VARCHAR}, {"googlePlusAddress", Types.VARCHAR},
		{"linkedinAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("teacherId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("biography", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("college", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("rank_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("position", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("roomNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phoneNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("twitterAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("googlePlusAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("linkedinAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table MYUD_Teacher (uuid_ VARCHAR(75) null,teacherId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name VARCHAR(75) null,biography TEXT null,college VARCHAR(75) null,rank_ VARCHAR(75) null,position VARCHAR(75) null,roomNumber VARCHAR(75) null,phoneNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,twitterAddress VARCHAR(75) null,googlePlusAddress VARCHAR(75) null,linkedinAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table MYUD_Teacher";

	public static final String ORDER_BY_JPQL =
		" ORDER BY teacher.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY MYUD_Teacher.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COLLEGE_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long TEACHERID_COLUMN_BITMASK = 8L;

	public static final long UUID_COLUMN_BITMASK = 16L;

	public static final long CREATEDATE_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Teacher toModel(TeacherSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Teacher model = new TeacherImpl();

		model.setUuid(soapModel.getUuid());
		model.setTeacherId(soapModel.getTeacherId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setBiography(soapModel.getBiography());
		model.setCollege(soapModel.getCollege());
		model.setRank(soapModel.getRank());
		model.setPosition(soapModel.getPosition());
		model.setRoomNumber(soapModel.getRoomNumber());
		model.setPhoneNumber(soapModel.getPhoneNumber());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setTwitterAddress(soapModel.getTwitterAddress());
		model.setGooglePlusAddress(soapModel.getGooglePlusAddress());
		model.setLinkedinAddress(soapModel.getLinkedinAddress());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Teacher> toModels(TeacherSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Teacher> models = new ArrayList<Teacher>(soapModels.length);

		for (TeacherSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TeacherModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _teacherId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTeacherId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _teacherId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Teacher.class;
	}

	@Override
	public String getModelClassName() {
		return Teacher.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Teacher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Teacher, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Teacher)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Teacher, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Teacher, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Teacher)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Teacher, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Teacher, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Teacher>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Teacher.class.getClassLoader(), Teacher.class, ModelWrapper.class);

		try {
			Constructor<Teacher> constructor =
				(Constructor<Teacher>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<Teacher, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Teacher, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Teacher, Object>>();
		Map<String, BiConsumer<Teacher, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Teacher, ?>>();

		attributeGetterFunctions.put("uuid", Teacher::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Teacher, String>)Teacher::setUuid);
		attributeGetterFunctions.put("teacherId", Teacher::getTeacherId);
		attributeSetterBiConsumers.put(
			"teacherId", (BiConsumer<Teacher, Long>)Teacher::setTeacherId);
		attributeGetterFunctions.put("groupId", Teacher::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Teacher, Long>)Teacher::setGroupId);
		attributeGetterFunctions.put("companyId", Teacher::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Teacher, Long>)Teacher::setCompanyId);
		attributeGetterFunctions.put("userId", Teacher::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Teacher, Long>)Teacher::setUserId);
		attributeGetterFunctions.put("userName", Teacher::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Teacher, String>)Teacher::setUserName);
		attributeGetterFunctions.put("createDate", Teacher::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Teacher, Date>)Teacher::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Teacher::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Teacher, Date>)Teacher::setModifiedDate);
		attributeGetterFunctions.put("status", Teacher::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Teacher, Integer>)Teacher::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", Teacher::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<Teacher, Long>)Teacher::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", Teacher::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<Teacher, String>)Teacher::setStatusByUserName);
		attributeGetterFunctions.put("statusDate", Teacher::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate", (BiConsumer<Teacher, Date>)Teacher::setStatusDate);
		attributeGetterFunctions.put("name", Teacher::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Teacher, String>)Teacher::setName);
		attributeGetterFunctions.put("biography", Teacher::getBiography);
		attributeSetterBiConsumers.put(
			"biography", (BiConsumer<Teacher, String>)Teacher::setBiography);
		attributeGetterFunctions.put("college", Teacher::getCollege);
		attributeSetterBiConsumers.put(
			"college", (BiConsumer<Teacher, String>)Teacher::setCollege);
		attributeGetterFunctions.put("rank", Teacher::getRank);
		attributeSetterBiConsumers.put(
			"rank", (BiConsumer<Teacher, String>)Teacher::setRank);
		attributeGetterFunctions.put("position", Teacher::getPosition);
		attributeSetterBiConsumers.put(
			"position", (BiConsumer<Teacher, String>)Teacher::setPosition);
		attributeGetterFunctions.put("roomNumber", Teacher::getRoomNumber);
		attributeSetterBiConsumers.put(
			"roomNumber", (BiConsumer<Teacher, String>)Teacher::setRoomNumber);
		attributeGetterFunctions.put("phoneNumber", Teacher::getPhoneNumber);
		attributeSetterBiConsumers.put(
			"phoneNumber",
			(BiConsumer<Teacher, String>)Teacher::setPhoneNumber);
		attributeGetterFunctions.put("emailAddress", Teacher::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<Teacher, String>)Teacher::setEmailAddress);
		attributeGetterFunctions.put(
			"twitterAddress", Teacher::getTwitterAddress);
		attributeSetterBiConsumers.put(
			"twitterAddress",
			(BiConsumer<Teacher, String>)Teacher::setTwitterAddress);
		attributeGetterFunctions.put(
			"googlePlusAddress", Teacher::getGooglePlusAddress);
		attributeSetterBiConsumers.put(
			"googlePlusAddress",
			(BiConsumer<Teacher, String>)Teacher::setGooglePlusAddress);
		attributeGetterFunctions.put(
			"linkedinAddress", Teacher::getLinkedinAddress);
		attributeSetterBiConsumers.put(
			"linkedinAddress",
			(BiConsumer<Teacher, String>)Teacher::setLinkedinAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getTeacherId() {
		return _teacherId;
	}

	@Override
	public void setTeacherId(long teacherId) {
		_columnBitmask |= TEACHERID_COLUMN_BITMASK;

		if (!_setOriginalTeacherId) {
			_setOriginalTeacherId = true;

			_originalTeacherId = _teacherId;
		}

		_teacherId = teacherId;
	}

	public long getOriginalTeacherId() {
		return _originalTeacherId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getBiography() {
		if (_biography == null) {
			return "";
		}
		else {
			return _biography;
		}
	}

	@Override
	public void setBiography(String biography) {
		_biography = biography;
	}

	@JSON
	@Override
	public String getCollege() {
		if (_college == null) {
			return "";
		}
		else {
			return _college;
		}
	}

	@Override
	public void setCollege(String college) {
		_columnBitmask |= COLLEGE_COLUMN_BITMASK;

		if (_originalCollege == null) {
			_originalCollege = _college;
		}

		_college = college;
	}

	public String getOriginalCollege() {
		return GetterUtil.getString(_originalCollege);
	}

	@JSON
	@Override
	public String getRank() {
		if (_rank == null) {
			return "";
		}
		else {
			return _rank;
		}
	}

	@Override
	public void setRank(String rank) {
		_rank = rank;
	}

	@JSON
	@Override
	public String getPosition() {
		if (_position == null) {
			return "";
		}
		else {
			return _position;
		}
	}

	@Override
	public void setPosition(String position) {
		_position = position;
	}

	@JSON
	@Override
	public String getRoomNumber() {
		if (_roomNumber == null) {
			return "";
		}
		else {
			return _roomNumber;
		}
	}

	@Override
	public void setRoomNumber(String roomNumber) {
		_roomNumber = roomNumber;
	}

	@JSON
	@Override
	public String getPhoneNumber() {
		if (_phoneNumber == null) {
			return "";
		}
		else {
			return _phoneNumber;
		}
	}

	@Override
	public void setPhoneNumber(String phoneNumber) {
		_phoneNumber = phoneNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getTwitterAddress() {
		if (_twitterAddress == null) {
			return "";
		}
		else {
			return _twitterAddress;
		}
	}

	@Override
	public void setTwitterAddress(String twitterAddress) {
		_twitterAddress = twitterAddress;
	}

	@JSON
	@Override
	public String getGooglePlusAddress() {
		if (_googlePlusAddress == null) {
			return "";
		}
		else {
			return _googlePlusAddress;
		}
	}

	@Override
	public void setGooglePlusAddress(String googlePlusAddress) {
		_googlePlusAddress = googlePlusAddress;
	}

	@JSON
	@Override
	public String getLinkedinAddress() {
		if (_linkedinAddress == null) {
			return "";
		}
		else {
			return _linkedinAddress;
		}
	}

	@Override
	public void setLinkedinAddress(String linkedinAddress) {
		_linkedinAddress = linkedinAddress;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Teacher.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Teacher.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Teacher toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Teacher>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TeacherImpl teacherImpl = new TeacherImpl();

		teacherImpl.setUuid(getUuid());
		teacherImpl.setTeacherId(getTeacherId());
		teacherImpl.setGroupId(getGroupId());
		teacherImpl.setCompanyId(getCompanyId());
		teacherImpl.setUserId(getUserId());
		teacherImpl.setUserName(getUserName());
		teacherImpl.setCreateDate(getCreateDate());
		teacherImpl.setModifiedDate(getModifiedDate());
		teacherImpl.setStatus(getStatus());
		teacherImpl.setStatusByUserId(getStatusByUserId());
		teacherImpl.setStatusByUserName(getStatusByUserName());
		teacherImpl.setStatusDate(getStatusDate());
		teacherImpl.setName(getName());
		teacherImpl.setBiography(getBiography());
		teacherImpl.setCollege(getCollege());
		teacherImpl.setRank(getRank());
		teacherImpl.setPosition(getPosition());
		teacherImpl.setRoomNumber(getRoomNumber());
		teacherImpl.setPhoneNumber(getPhoneNumber());
		teacherImpl.setEmailAddress(getEmailAddress());
		teacherImpl.setTwitterAddress(getTwitterAddress());
		teacherImpl.setGooglePlusAddress(getGooglePlusAddress());
		teacherImpl.setLinkedinAddress(getLinkedinAddress());

		teacherImpl.resetOriginalValues();

		return teacherImpl;
	}

	@Override
	public int compareTo(Teacher teacher) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), teacher.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Teacher)) {
			return false;
		}

		Teacher teacher = (Teacher)obj;

		long primaryKey = teacher.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TeacherModelImpl teacherModelImpl = this;

		teacherModelImpl._originalUuid = teacherModelImpl._uuid;

		teacherModelImpl._originalTeacherId = teacherModelImpl._teacherId;

		teacherModelImpl._setOriginalTeacherId = false;

		teacherModelImpl._originalGroupId = teacherModelImpl._groupId;

		teacherModelImpl._setOriginalGroupId = false;

		teacherModelImpl._originalCompanyId = teacherModelImpl._companyId;

		teacherModelImpl._setOriginalCompanyId = false;

		teacherModelImpl._setModifiedDate = false;

		teacherModelImpl._originalCollege = teacherModelImpl._college;

		teacherModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Teacher> toCacheModel() {
		TeacherCacheModel teacherCacheModel = new TeacherCacheModel();

		teacherCacheModel.uuid = getUuid();

		String uuid = teacherCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			teacherCacheModel.uuid = null;
		}

		teacherCacheModel.teacherId = getTeacherId();

		teacherCacheModel.groupId = getGroupId();

		teacherCacheModel.companyId = getCompanyId();

		teacherCacheModel.userId = getUserId();

		teacherCacheModel.userName = getUserName();

		String userName = teacherCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			teacherCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			teacherCacheModel.createDate = createDate.getTime();
		}
		else {
			teacherCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			teacherCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			teacherCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		teacherCacheModel.status = getStatus();

		teacherCacheModel.statusByUserId = getStatusByUserId();

		teacherCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = teacherCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			teacherCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			teacherCacheModel.statusDate = statusDate.getTime();
		}
		else {
			teacherCacheModel.statusDate = Long.MIN_VALUE;
		}

		teacherCacheModel.name = getName();

		String name = teacherCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			teacherCacheModel.name = null;
		}

		teacherCacheModel.biography = getBiography();

		String biography = teacherCacheModel.biography;

		if ((biography != null) && (biography.length() == 0)) {
			teacherCacheModel.biography = null;
		}

		teacherCacheModel.college = getCollege();

		String college = teacherCacheModel.college;

		if ((college != null) && (college.length() == 0)) {
			teacherCacheModel.college = null;
		}

		teacherCacheModel.rank = getRank();

		String rank = teacherCacheModel.rank;

		if ((rank != null) && (rank.length() == 0)) {
			teacherCacheModel.rank = null;
		}

		teacherCacheModel.position = getPosition();

		String position = teacherCacheModel.position;

		if ((position != null) && (position.length() == 0)) {
			teacherCacheModel.position = null;
		}

		teacherCacheModel.roomNumber = getRoomNumber();

		String roomNumber = teacherCacheModel.roomNumber;

		if ((roomNumber != null) && (roomNumber.length() == 0)) {
			teacherCacheModel.roomNumber = null;
		}

		teacherCacheModel.phoneNumber = getPhoneNumber();

		String phoneNumber = teacherCacheModel.phoneNumber;

		if ((phoneNumber != null) && (phoneNumber.length() == 0)) {
			teacherCacheModel.phoneNumber = null;
		}

		teacherCacheModel.emailAddress = getEmailAddress();

		String emailAddress = teacherCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			teacherCacheModel.emailAddress = null;
		}

		teacherCacheModel.twitterAddress = getTwitterAddress();

		String twitterAddress = teacherCacheModel.twitterAddress;

		if ((twitterAddress != null) && (twitterAddress.length() == 0)) {
			teacherCacheModel.twitterAddress = null;
		}

		teacherCacheModel.googlePlusAddress = getGooglePlusAddress();

		String googlePlusAddress = teacherCacheModel.googlePlusAddress;

		if ((googlePlusAddress != null) && (googlePlusAddress.length() == 0)) {
			teacherCacheModel.googlePlusAddress = null;
		}

		teacherCacheModel.linkedinAddress = getLinkedinAddress();

		String linkedinAddress = teacherCacheModel.linkedinAddress;

		if ((linkedinAddress != null) && (linkedinAddress.length() == 0)) {
			teacherCacheModel.linkedinAddress = null;
		}

		return teacherCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Teacher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Teacher, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((Teacher)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Teacher, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Teacher, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Teacher, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Teacher)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Teacher>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _teacherId;
	private long _originalTeacherId;
	private boolean _setOriginalTeacherId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _biography;
	private String _college;
	private String _originalCollege;
	private String _rank;
	private String _position;
	private String _roomNumber;
	private String _phoneNumber;
	private String _emailAddress;
	private String _twitterAddress;
	private String _googlePlusAddress;
	private String _linkedinAddress;
	private long _columnBitmask;
	private Teacher _escapedModel;

}